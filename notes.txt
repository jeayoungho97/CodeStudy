This study of Algorithms using C++ started on 08/Feb/2025

Date : 12/Feb/2025

    First upload to Github.

    Studied "Absorbing Markov Chain" in the morning. (MIT OCW)

    Preparing moving to a new house in the afternoon.

    moving to a new repository

    git is actually very tricky...

    experimneting with git

Date : 17/Feb/2025

    Been a tough week.. moving to a new home.

    Finally got the time to study alogithms.

    Happy to be back!

Date : 19/Feb/2025

    Solved my first BaekJoon silver problems.

    Feel like getting used to coding in c++.

    Week 0 and Week 1 studies are doing their work.

    Solving mainly Psum, Permutation, Split problems.

Date : 20/Feb/2025

    Finally free from cleaning and organizing our new home.

Date : 5/April/2025

    Finally starting week4. Haven't been leaving notes since Feb 20th but now I'll keep it on.
    -> Notes about each problem, each week and concepts.

Date : 7/April/2025

    19942 : 사전 순으로 정렬하는 것에서 틀림 -> 따로 함수를 만들어서 관리

    & 0 -> off
    & 1 -> 그대로

    | 0 -> 그대로
    | 1 -> on

    ^ 0 -> 그대로
    ^ 1 -> switch


            ...
    2 -> 000000...0010
    1 -> 000000...0001
    0 -> 000000...0000
   -1 -> 111111...1111
   -2 -> 111111...1110
            ...
    맨 앞 비트가 부호를 의미?
   -N = ~N + 1

Date : 8/April/2025

    <1285> 
    비트마스킹으로 푼 정답 코드가 왜 비트마스킹이 아닌 2차원 배열을 사용한 내 코드보다 느릴까?
    그것은 바로 비트마스킹의 범위를 N 으로 제한하지 않았기 때문 -> 제한할 경우 배열보다 더 빨라짐!
    해당 사실은 백준 - 내 제출에 가서 확인 가능.

Date : 9/April/2025

    <17471>
    비트마스킹 -> N 개의 구역을 101101.. 과 같이 표현했을 때,
    두 개의 선거구로 나눈 것이라 볼 수 있음.
    각 선거구의 구역이 서로 연결되는지 확인 -> 어떻게? 연결된 구역에 같은 선거구의 구역이 하나라도 있으면 연결된 것.
    각 선거구의 인구의 합을 서로 비교함 -> 최소값 저장

Date : 26/May/2025
    <6236>
    Main Logic : 
    1. Find minimum value of K using Binary Search
    2. 만약 M번보다 적게 돈을 인출하여 완수할 수 있다면 ok.

    Caution : 
    1. 돈이 부족한 경우 인출한 다음에 해당 arr 값을 빼줄 것!
    2. left, right 를 배열의 최댓값, 배열의 전체합으로 설정.
    3. while(left < right) 로 하고 
       true 일 경우 right = mid
       false 일 경우 left = mid + 1
       최종적으론 left 가 답이 됨.
    
    <7795>
    Main Logic (Binary Search)
    1. 각 배열 1의 값에 대해 배열 2에서 이분탐색을 이용해 더 작은 숫자의 개수를 구한다. -> O(logM)
    2. 숫자의 총합을 출력

    Main Logic (Two Pointer)
    1. 위의 방법과 비슷하나, 배열 1도 오름차순 정렬을 한 뒤 배열 2애서 점점 포인터를 늘려가며 개수를 셈. -> O(1)

    Caution
    1. 투 포인터가 훨씬 좋은 방법인듯?

    <1269>
    Main Logic
    1. 두 배열을 오름차순 정렬한 뒤 크기가 다르면 ++count, 투포인터 느낌으로 풀었
    음.

Date : 27/May/2025
    <16434>
    Main Logic
    1. Binary Search 를 이용하여 필요한 최소 hp 를 구하는 문제.
    2. 공격 후 hp 를 구할 때 직접 하나하나 계산하는게 아니라 최종 결과만 얻으면 됨. 하나하나 계산하면 시간초과.

    Caution
    1. while 문으로 계산할 경우 Big - O 를 잘 계산해야함.
    2. hp / atk 가 공격횟수가 아닌, (hp + atk - 1) / atk 가 공격횟수임을 이용해야함.

    <1072>
    Main Logic 
    1. ((Y + Z) / (X + Z)) > (Y / X) 인 Z 를 찾는 문제.
    2. Binary Search 를 이용해서 Z 를 찾는다.
    3. 단 99% 이상은 절대 1% 이상의 확률 상승이 있을 수 없으므로 -1 출력.

    Caution
    1. left < right 와 left <= right 의 차이점을 잘 구분하여 사용할 것.

Date : 28/May/2025
    <2776>
    Main Logic
    1. M 개의 숫자를 N 개의 정렬된 수열에서 Binary Search 를 하며 찾아냄.
    2. O(MlogN)

    <14627>
    Main Logic
    1. 파닭에 들어가는 파의 양을 Binary Search 로 구한 뒤, 전체 파의 길이에서 사용한 만큼만 빼주면 된다.

    Caution
    1. right 가 파 중에서 가장 길이가 짧은 것이 아닌, 가장 긴 것으로 설정해줘야한다.
    2. long long 계산을 할 때, 

       static_cast<long long>(ans * C) 와

       static_cast<long long>(ans) * c

       는 명백히 다르다. 
       위의 코드의 경우 ans * C 에서 이미 오버플로우가 난 후 long long 으로 승격이 되므로 잘못된 값이 들어감.
       반면 아래의 코드는 ans 가 long long 으로 이미 승격이 된 후이므로 C 를 곱해주어도 오버플로우가 발생하지 않음.

       즉, 타입을 변환할 때에는 계산한 뒤에 하는 것이 아닌, 계산하기 전 한 변수에 미리 해줘야함.

    <1561>
    Main Logic
    1. 걸리는 시간에 대해 Binary Search 를 진행.
    2. 시간을 각 놀이기구의 운행시간으로 나누고 + 1 을 하면 총 탑승한 아이들의 수가 됨.
    3. 이 때 탑승한 아이들의 수가 N 이고, 나누어떨어지는 순간까지 BS 해야함. 
    4. 나누어 떨어지는 기구들 중에서 가장 index 가 큰 것을 찾아야함(std::max)
    
Date : 29/May/2025
    <14003>
    Main Logic
    1. 기존의 O(N^2) 방식으론 시간초과가 날 수 있으므로 O(NlogN) 채택.
    2. 다만 이 방식의 문제점은 LIS 배열을 뽑기 위해 추가적인 정보가 필요하다는 것.
    3. ans 에 index, value 의 정보를 담음
    4. stack 을 이용하여 맞는 index 를 가지고 있는 값을 담음.
    5. 즉 데이터의 하극상(?)이 일어나지 않도록 하는 것
       예를 들어, 인덱스가 0 1 0 0 2 3 과 같이 저장되었다면 배열의 길이가 4 이고,
       ans[i] == len - 1 일 때인 3 -> 2 -> 1 -> 0 순으로 stack 에 담김.
       매번 스택에 담길때마다 --len 를 해주므로 중간에 있는 0 들을 무시하고 지나갈 수 있는 것.

    <2670>
    Main Logic
    1. 처음부터 곱해나가다가 곱한 결과와 곱해야하는 수 중 최댓값을 고름.
    2. 주의할 점은 마지막에 소수점 맞추는 것.

    Caution
    1. std::round(ans * 10000.0) / 10000.0 같은 방식보다는
       sdt::fixed << std::setprecision(3) << ans << '\n';
       를 하는 것이 정확하다.
    2. 이 때 <iomanip> 헤더를 추가해야함.

    <11053>
    Main Logic
    1. 기본적인 LIS 알고리즘 -> 길이만 구하면 되고 N ~ 1000 이므로 O(N^2) 방법을 써도 충분함.

    <14002>
    Main Logic
    1. 또한 마찬가지로 기본적인 LIS 알고리즘. 다만 수열까지 출력해야하므로 prev_list 로 idx 를 역추적해 나감.

    <2565>
    Main Logic
    1. LIS 알고리즘의 응용. pair 로 입력을 받고 sort 를 한 뒤에 LIS 를 하면 되는 간단한 문제.
    2. 여기서 cnt[i] < cnt[j] + 1 가 헷갈릴 수 있으므로 짚고 넘어가자면, 
    cnt[j] 는 j 까지의 수열의 길이이고, 그 다음에 i 까지 추가시키면 cnt[j] + 1 이 된다. 
    이것이 기존의 수열인 cnt[i] 보다 길어지면 그 때엔 cnt[i] = cnt[j] + 1 로 갱신해야한다.
    기존 수열인 cnt[i] 와 cnt[j] + 1 이 같다면 이 또한 가장 긴 수열이 맞긴 하나 굳이 반복할 필요가 없다.

    Caution
    1. pair 를 사용했을 경우 first 와 second 를 혼동하지 않았는지 주의!

Date : 1/June/2025
    <2240>
    Main Logic
    1. DP 를 이용하여 푸는 문제 -> 강의 설명와 숫자만 다른 문제

    Caution!!!
    1. DP 재귀함수를 return 할 때 return ret = max(...); 로 해줘야 메모이제이션이 되는것.

    <2098>
    1. 외판원 순환 문제. DP 의 아주 중요한 문제.
    2. 현재 어느 도시에 있고, 지나온 도시들(비트마스킹) 이 어디인지를 가지고 dp 를 만듬.
    3. 어느 도시에서 시작하던 결과엔 상관이 없음. 그래서 보통 0번 도시를 출발점으로 삼음.
       (어차피 순회하기 때문에 1 -> 2 -> 3 -> 1  로 가나, 2 -> 3 -> 1 -> 2 로 가나 똑같은 비용이 듬)
    4. 모든 도시를 방문했을 때가 기저사례이며, 현재 도시에서 처음 도시로 돌아갈 수 있다면 그 비용을 반환.
    5. 기저사례에서 처음 도시로 돌아갈 수 없다면 INF 를 반환해서 이 경로를 제외시킴.
    6. 도시를 처음부터 for 문을 돌리면서, 이전에 방문을 안했고 방문을 할 수 있다면 재귀호출을 통해 최솟값을 구함.

    <17070> 파이프 옮기기1
    1. DP 를 이용해 (n - 1, n - 1) 까지 갈 수 있는 경우의 수를 구하는 문제.
    2. 가로, 세로, 대각선으로 이동했던 경우 계산에서 제외시킬 조건을 잘 고려해야함.
    3. go(int i, int j, int dir) 매개변수의 의미를 잘 알아야함.
       (i, j) 는 현재 위치, dir 은 현재 위치로 오기 위해 사용한 파이프의 방향 (0 -> 가로, 1 -> 대각선, 2 -> 세로)

Date : 2/June/2025
    <1103> 게임
    0. 입력을 받을 때 char 로 받아야함 (또는 스트링으로 받고 하나씩 참조)
    1. 각 좌표별 dp 를 만들어 움직일 수 있는 최대값 - 1 을 저장함.
    2. -1 을 하는 이유는 맵 밖으로 탈출하거나 구멍에 빠질 때 값을 마지막에 +1 로 더해서 출력해주기 때문.
    3. visited 를 만들고 백트래킹도 구현. -> visited 를 통해 무한루프를 도는지 확인.
  